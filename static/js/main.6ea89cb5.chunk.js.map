{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Input","props","handleOnChange","bind","handleOnClick","handleBtnDel","handleOnKeyDown","state","todoList","inputValue","this","setState","unshift","localStorage","setItem","JSON","stringify","ev","target","value","i","className","match","splice","key","style","marginTop","onChange","onKeyDown","type","name","onClick","Todo","React","Component","listyle","border","borderRadius","listStyle","padding","fontFamily","margin","wordWrap","position","textAlign","boxShadow","btnstyle","width","height","right","bottom","lineHeight","color","overflowY","paddingBottom","map","item","App","top","arr","getItem","parse","ls","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAgBMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBACvB,EAAKI,MAAQ,CAACC,SAASP,EAAMO,SAAUC,WAAW,IANlC,E,6EASF,IAAD,OACgB,KAA1BC,KAAKH,MAAME,aACZC,KAAKC,UAAS,YAAe,IAAbH,EAAY,EAAZA,SACdA,EAASI,QAAQ,EAAKL,MAAME,YAC5BI,aAAaC,QAAQ,OAAOC,KAAKC,UAAUR,OAE7CE,KAAKC,SAAS,CAACF,WAAW,Q,qCAIfQ,GACbP,KAAKC,SAAS,CAACF,WAAWQ,EAAGC,OAAOC,U,mCAGzBF,GACX,IAAIG,EAAIH,EAAGC,OAAOG,UAAUC,MAAM,QAAQ,GAC1CZ,KAAKC,UAAS,SAACJ,GACbA,EAAMC,SAASe,OAAOH,EAAE,GACxBP,aAAaC,QAAQ,OAAOC,KAAKC,UAAUT,EAAMC,cAEnDE,KAAKC,SAAS,CAACF,WAAW,O,sCAGZQ,GACD,UAAXA,EAAGO,KACLd,KAAKN,kB,+BAKL,OACA,yBAAKqB,MAAO,CAACC,UAAU,QACvB,yCACA,+BACA,2BAAOC,SAAUjB,KAAKR,eAAgB0B,UAAWlB,KAAKJ,gBAAiBuB,KAAK,OAAOC,KAAK,QAAQX,MAAOT,KAAKH,MAAME,aAClH,4BAAQsB,QAASrB,KAAKN,eAAtB,QAEA,kBAAC4B,EAAD,CAAMxB,SAAUE,KAAKH,MAAMC,SAAUH,aAAcK,KAAKL,oB,GA/CxC4B,IAAMC,WAmD1B,SAASF,EAAK/B,GACZ,IAAMkC,EAAU,CACdC,OAAO,oBACPC,aAAa,MACbC,UAAU,OACVC,QAAS,sBACTC,WAAY,QACZC,OAAQ,OACRC,SAAS,aACTC,SAAS,WACTC,UAAU,UACVC,UAAU,wBAWNC,EAAW,CACfC,MAAM,OACNC,OAAO,OACPX,aAAa,MACbM,SAAS,WACTM,MAAM,OACNC,OAAO,MACPX,QAAQ,IACRY,WAAW,OACXC,MAAM,OAEN,OACE,6BACA,wBAAI3B,MAtBQ,CACdgB,OAAO,OACPM,MAAM,OACNC,OAAO,OACPK,UAAU,SACVC,cAAc,OACdT,UAAU,8BACVR,aAAa,QAeUpC,EAAMO,SAAS+C,KAAI,SAACC,EAAKpC,GAAN,OAAa,wBAAII,IAAKgC,EAAKpC,EAAGK,MAAOU,GAAS,8BAAOqB,GAAY,4BAAQ/B,MAAOqB,EAAUzB,UAAS,gBAAWD,GAAKW,QAAS9B,EAAMI,cAAjE,WAKhGoD,MAxGf,WACE,OACE,yBAAKpC,UAAU,MAAMI,MAAO,CAACkB,SAAS,QAASe,IAAI,IAAKX,MAAM,UAC5D,kBAAC,EAAD,CAAOvC,SAGX,WACE,IAAImD,EAAM9C,aAAa+C,QAAQ,QAE/B,OADcD,EAAN,OAARA,EAAoB5C,KAAK8C,MAAMF,GAAa,GALzBG,OCMHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCZN6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6ea89cb5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{position:\"fixed\", top:\"0\", width:\"100vw\"}}>\n      <Input todoList={ls()}/>\n    </div>\n  );\n  function ls(){\n    let arr = localStorage.getItem('todo');\n    arr !== null? arr = JSON.parse(arr) : arr = [];\n    return arr;\n  }\n}\n\nclass Input extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.handleBtnDel = this.handleBtnDel.bind(this);\n    this.handleOnKeyDown = this.handleOnKeyDown.bind(this);\n    this.state = {todoList:props.todoList, inputValue:''};\n  }\n\n  handleOnClick(){\n    if(this.state.inputValue !== ''){\n      this.setState(({todoList})=>{\n        todoList.unshift(this.state.inputValue);\n        localStorage.setItem('todo',JSON.stringify(todoList));\n      });\n      this.setState({inputValue:'',});\n    }\n  }\n\n  handleOnChange(ev){\n    this.setState({inputValue:ev.target.value,});\n  }\n\n  handleBtnDel(ev){\n    let i = ev.target.className.match(/\\d+/g)[0];\n    this.setState((state)=>{\n      state.todoList.splice(i,1);\n      localStorage.setItem('todo',JSON.stringify(state.todoList));\n    });\n    this.setState({inputValue:'',});\n  }\n\n  handleOnKeyDown(ev){\n   if(ev.key === 'Enter'){\n    this.handleOnClick();\n   }\n  }\n\n  render(){\n    return(\n    <div style={{marginTop:\"3px\"}}>\n    <h3>TODO LIST</h3>\n    <label>\n    <input onChange={this.handleOnChange} onKeyDown={this.handleOnKeyDown} type=\"text\" name=\"input\" value={this.state.inputValue}/>\n    <button onClick={this.handleOnClick}>ADD</button>\n    </label>\n    <Todo todoList={this.state.todoList} handleBtnDel={this.handleBtnDel}/>\n    </div>)}\n}\n\nfunction Todo(props){\n  const listyle = {\n    border:\"1px solid #3584E4\",\n    borderRadius:\"5px\",\n    listStyle:\"none\",\n    padding: \"10px 10px 25px 10px\",\n    fontFamily: \"Arial\",\n    margin: \"10px\",\n    wordWrap:\"break-word\",\n    position:\"relative\",\n    textAlign:\"justify\",\n    boxShadow:' 0 0 5px 2px #3584E4',\n  };\n  const ulstyle = {\n    margin:\"auto\",\n    width:\"60vw\",\n    height:\"70vh\",\n    overflowY:\"scroll\",\n    paddingBottom:\"10px\",\n    boxShadow:' inset 0 0 15px 5px #3584E4',\n    borderRadius:\"5px\",\n  }\n  const btnstyle = {\n    width:\"20px\",\n    height:\"20px\",\n    borderRadius:\"50%\",\n    position:\"absolute\", \n    right:\"10px\", \n    bottom:\"5px\",\n    padding:\"0\",\n    lineHeight:\"10px\",\n    color:\"red\",\n  }\n    return(\n      <div>\n      <ul style={ulstyle}>{props.todoList.map((item,i) => (<li key={item+i} style={listyle}><span>{item}</span><button style={btnstyle} className={`btnDel${i}`} onClick={props.handleBtnDel}>X</button></li>))}</ul>\n      </div>\n    )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}